
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://snxvacdlisrkwmxnraxw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNueHZhY2RsaXNya3dteG5yYXh3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1MzE1MTksImV4cCI6MjA2MDEwNzUxOX0.uVQdszeQEualoj0bbLPg5MlKG-2oTlxlivSxnZpwsdg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to check if a table exists
export const checkTableExists = async (tableName: string): Promise<boolean> => {
  try {
    const { count, error } = await supabase
      .from(tableName as any)
      .select('*', { count: 'exact', head: true });
    
    return !error;
  } catch (error) {
    console.error(`Error checking if table ${tableName} exists:`, error);
    return false;
  }
};

// Helper function to check if a bucket exists
export const checkBucketExists = async (bucketName: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase.storage.getBucket(bucketName);
    return !error && data !== null;
  } catch (error) {
    console.error(`Error checking if bucket ${bucketName} exists:`, error);
    return false;
  }
};

// Helper function to ensure a bucket exists, create it if it doesn't
export const ensureBucketExists = async (bucketName: string, isPublic: boolean = false): Promise<boolean> => {
  const exists = await checkBucketExists(bucketName);
  
  if (!exists) {
    try {
      const { error } = await supabase.storage.createBucket(bucketName, {
        public: isPublic,
      });
      
      if (error) {
        console.error(`Error creating bucket ${bucketName}:`, error);
        return false;
      }
      
      return true;
    } catch (error) {
      console.error(`Exception creating bucket ${bucketName}:`, error);
      return false;
    }
  }
  
  return true;
};

// Get current user ID helper
export const getCurrentUserId = (): string | null => {
  const session = supabase.auth.getSession();
  return session ? supabase.auth.getUser().then(({ data }) => data?.user?.id || null) : null;
};
